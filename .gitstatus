#!/usr/bin/python3
import sys
from subprocess import PIPE
from subprocess import Popen

SYMBOLS = {
    'ahead of': '↑·',
    'behind': '↓·',
    'prehash': ':',
}

def run(args):
    process = Popen(
        args,
        stdout=PIPE,
        stderr=PIPE,
    )
    output, error = process.communicate()

    return output.decode('utf-8').strip(), error.decode('utf-8').strip()

branch, error_string = run(
    ['git', 'symbolic-ref', 'HEAD'],
)

if 'fatal: Not a git repository' in error_string:
    sys.exit(0)

branch = branch[11:]

result, error_string = run(
    ['git', 'diff', '--name-status'],
)

if 'fatal' in error_string:
    sys.exit(0)

changed_files = [
    namestat[0]
    for namestat in result.splitlines()
]
staged_files = [
    namestat[0]
    for namestat in run(
            ['git', 'diff', '--staged', '--name-status'],
    )[0].splitlines()
]

nb_changed = len(changed_files) - changed_files.count('U')
nb_U = staged_files.count('U')
nb_staged = len(staged_files) - nb_U
staged = str(nb_staged)
conflicts = str(nb_U)
changed = str(nb_changed)

status_lines = run(
    ['git', 'status', '-s', '-uall'],
)[0].splitlines()

untracked_lines = [
    untracked
    for untracked in status_lines
    if untracked.startswith('??')
]

nb_untracked = len(untracked_lines)
untracked = str(nb_untracked)

stashes = run(
    ['git', 'stash', 'list'],
)[0].splitlines()

nb_stashed = len(stashes)
stashed = str(nb_stashed)

if (not nb_changed
        and not nb_staged
        and not nb_U
        and not nb_untracked
        and not nb_stashed):
    clean = '1'
else:
    clean = '0'

remote = ''

tag, tag_error = run(
    ['git', 'describe', '--exact-match'],
)

if not branch:  # Not on any branch
    if tag:  # If we are on a tag, print the tag's name
        branch = tag
    else:
        branch = SYMBOLS['prehash'] + run(
            ['git', 'rev-parse', '--short', 'HEAD'],
        )[0][:-1]
else:
    remote_name = run(
        ['git', 'config', 'branch.%s.remote' % branch],
    )[0]
    if remote_name:
        merge_name = run(
            ['git', 'config', 'branch.%s.merge' % branch],
        )[0]
    else:
        remote_name = 'origin'
        merge_name = 'refs/heads/%s' % branch

    if remote_name == '.':  # Local
        remote_ref = merge_name
    else:
        remote_ref = 'refs/remotes/%s/%s' % (remote_name, merge_name[11:])

    revgit = run(
        ['git', 'rev-list', '--left-right', '%s...HEAD' % remote_ref],
    )
    revlist = revgit[0]

    if not revlist:  # Fallback to local
        revlist = run(
            ['git', 'rev-list', '--left-right', '%s...HEAD' % merge_name],
        )[0]

    behead = revlist.splitlines()
    ahead = len([x for x in behead if x[0] == '>'])
    behind = len(behead) - ahead

    if behind:
        remote += '%s%s' % (SYMBOLS['behind'], behind)
    if ahead:
        remote += '%s%s' % (SYMBOLS['ahead of'], ahead)

if remote == '':
    remote = '.'

out = '\n'.join(
    [
        branch,
        remote,
        staged,
        conflicts,
        changed,
        untracked,
        stashed,
        clean
    ],
)

print(out)
