#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the active virtualenv
#    * the branch/status of the current git repository
#    * the return value of the previous command
#    * the fact you just came from Windows and are used to having newlines in
#      your prompts.
#
#
# LINEAGE:
#
#   Based on work by woods
#
#   https://gist.github.com/1425703

# The various escape codes that we can use to color our prompt.
   RED="\[\033[0;31m\]"
 GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
  BLUE="\[\033[0;34m\]"
  PINK="\[\033[0;35m\]"
  CYAN="\[\033[0;36m\]"
 WHITE="\[\033[0;37m\]"

   RED_BOLD="\[\033[1;31m\]"
 GREEN_BOLD="\[\033[1;32m\]"
YELLOW_BOLD="\[\033[1;33m\]"
  BLUE_BOLD="\[\033[1;34m\]"
  PINK_BOLD="\[\033[1;35m\]"
  CYAN_BOLD="\[\033[1;36m\]"
 WHITE_BOLD="\[\033[1;37m\]"

COLOR_NONE="\[\e[0m\]"

# Colors for infos
if test "$SSH_CONNECTION" ; then
  INFO_COLOR="${RED_BOLD}"
else
  INFO_COLOR="${BLUE_BOLD}"
fi
# The icons for local state
GIT_PROMPT_STAGED="${BLUE}● "
GIT_PROMPT_CONFLICTS="${RED}✖ "
GIT_PROMPT_CHANGED="${GREEN}✚ "
GIT_PROMPT_UNTRACKED="${PINK}…"
GIT_PROMPT_STASHED="${CYAN}⚑ "
GIT_PROMPT_CLEAN="${GREEN_BOLD}✔"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git diff > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_status {
  local -a git_status
  # Capture the output of the "gitstatus" script.
  git_status=($(~/.gitstatus 2> /dev/null))

  local GIT_BRANCH=${git_status[0]}
  local GIT_REMOTE=${git_status[1]}
  if [[ "." == "$GIT_REMOTE" ]]; then
    unset GIT_REMOTE
  fi
  local GIT_STAGED=${git_status[2]}
  local GIT_CONFLICTS=${git_status[3]}
  local GIT_CHANGED=${git_status[4]}
  local GIT_UNTRACKED=${git_status[5]}
  local GIT_STASHED=${git_status[6]}
  local GIT_CLEAN=${git_status[7]}

  # Compute the state color
  state=${WHITE_BOLD}
  if test "$GIT_CONFLICTS" -ne 0 ; then
    state=${RED_BOLD}
  elif test "$GIT_STAGED" -ne 0 ; then
    state=${BLUE_BOLD}
  elif test "$GIT_CHANGED" -ne 0 ; then
    state=${GREEN_BOLD}
  elif test "$GIT_UNTRACKED" -ne 0 ; then
    state=${PINK_BOLD}
  fi

  # Compute local state
  local=""
  __chk_gitvar_status() {
    local v
    if [[ "x$2" == "x-n" ]] ; then
      v="$2 \"\$GIT_$1\""
    else
      v="\$GIT_$1 $2"
    fi
    if eval "test $v" ; then
      if [[ $# -lt 2 || "$3" != '-' ]]; then
        __add_status "\$GIT_PROMPT_$1\$GIT_$1"
      else
        __add_status "\$GIT_PROMPT_$1"
      fi
    fi
  }

  __add_status() {
    eval "local=\"$local$1\"\${COLOR_NONE}"
  }

  __chk_gitvar_status 'STAGED' '-ne 0'
  __chk_gitvar_status 'CONFLICTS' '-ne 0'
  __chk_gitvar_status 'CHANGED' '-ne 0'
  __chk_gitvar_status 'UNTRACKED' '-ne 0'
  __chk_gitvar_status 'STASHED' '-ne 0'
  __chk_gitvar_status 'CLEAN' '-eq 1' -

  # Set the final git status string.
  GIT_STATUS="${state}${GIT_BRANCH}${GIT_REMOTE}${COLOR_NONE}|${local}${COLOR_NONE}"
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL_COLOR="${GREEN_BOLD}"
  else
      PROMPT_SYMBOL_COLOR="${RED_BOLD}"
  fi
  PROMPT_SYMBOL="${PROMPT_SYMBOL_COLOR}\$${COLOR_NONE} "
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${CYAN_BOLD}`basename \"$VIRTUAL_ENV\"`${COLOR_NONE}"
  fi
}

# Short the path with using virtualenv
function pwd_tail () {
  if test -z "$VIRTUAL_ENV" ; then
    PWD_TAIL="\w"
  else
    PWD_TAIL="`pwd | sed \"s;${VIRTUAL_ENV};~;\"`"
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Configure current path
  pwd_tail

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_status
  else
    GIT_STATUS=''
  fi

  # Set the bash prompt variable.
  CONTEXT=''
  if test "$PYTHON_VIRTUALENV" && test "$GIT_STATUS" ; then
    CONTEXT="${PYTHON_VIRTUALENV}@${GIT_STATUS}"
  else
    CONTEXT="${PYTHON_VIRTUALENV}${GIT_STATUS}"
  fi
  if test "$CONTEXT" ; then
    CONTEXT="${INFO_COLOR}[${CONTEXT}${INFO_COLOR}]"
  fi

  INFOS="${INFO_COLOR}(${COLOR_NONE}\# ${CYAN}\t${INFO_COLOR})"

  TAIL="${GREEN}${PWD_TAIL}${PROMPT_SYMBOL}"

  PS1="${CONTEXT}${INFOS}${TAIL}"
}

# Disable virtualenv prompt modification
VIRTUAL_ENV_DISABLE_PROMPT=1
# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
